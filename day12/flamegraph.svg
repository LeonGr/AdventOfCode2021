<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="693" width="0.2639%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="677" width="0.2639%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="661" width="0.2639%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="645" width="0.2639%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="629" width="0.2639%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="613" width="0.2639%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="597" width="0.2639%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="0.0000%" y="581" width="0.2639%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="0.2639%" y="357" width="0.2639%" height="15" fill="rgb(218,30,26)"/><text x="0.5139%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="0.2639%" y="341" width="0.2639%" height="15" fill="rgb(220,122,19)"/><text x="0.5139%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="0.2639%" y="325" width="0.2639%" height="15" fill="rgb(250,228,42)"/><text x="0.5139%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.26%)</title><rect x="0.2639%" y="309" width="0.2639%" height="15" fill="rgb(240,193,28)"/><text x="0.5139%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.26%)</title><rect x="0.2639%" y="293" width="0.2639%" height="15" fill="rgb(216,20,37)"/><text x="0.5139%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.26%)</title><rect x="0.2639%" y="277" width="0.2639%" height="15" fill="rgb(206,188,39)"/><text x="0.5139%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="0.2639%" y="261" width="0.2639%" height="15" fill="rgb(217,207,13)"/><text x="0.5139%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="0.2639%" y="245" width="0.2639%" height="15" fill="rgb(231,73,38)"/><text x="0.5139%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="0.2639%" y="229" width="0.2639%" height="15" fill="rgb(225,20,46)"/><text x="0.5139%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.26%)</title><rect x="0.2639%" y="213" width="0.2639%" height="15" fill="rgb(210,31,41)"/><text x="0.5139%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="0.2639%" y="197" width="0.2639%" height="15" fill="rgb(221,200,47)"/><text x="0.5139%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="0.2639%" y="181" width="0.2639%" height="15" fill="rgb(226,26,5)"/><text x="0.5139%" y="191.50"></text></g><g><title>__rust_alloc (1 samples, 0.26%)</title><rect x="0.2639%" y="165" width="0.2639%" height="15" fill="rgb(249,33,26)"/><text x="0.5139%" y="175.50"></text></g><g><title>__GI___libc_free (1 samples, 0.26%)</title><rect x="0.5277%" y="357" width="0.2639%" height="15" fill="rgb(235,183,28)"/><text x="0.7777%" y="367.50"></text></g><g><title>_int_free (1 samples, 0.26%)</title><rect x="0.5277%" y="341" width="0.2639%" height="15" fill="rgb(221,5,38)"/><text x="0.7777%" y="351.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.26%)</title><rect x="1.0554%" y="341" width="0.2639%" height="15" fill="rgb(247,18,42)"/><text x="1.3054%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 1.06%)</title><rect x="1.8470%" y="325" width="1.0554%" height="15" fill="rgb(241,131,45)"/><text x="2.0970%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.53%)</title><rect x="2.3747%" y="309" width="0.5277%" height="15" fill="rgb(249,31,29)"/><text x="2.6247%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.53%)</title><rect x="2.3747%" y="293" width="0.5277%" height="15" fill="rgb(225,111,53)"/><text x="2.6247%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.53%)</title><rect x="2.3747%" y="277" width="0.5277%" height="15" fill="rgb(238,160,17)"/><text x="2.6247%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.53%)</title><rect x="2.3747%" y="261" width="0.5277%" height="15" fill="rgb(214,148,48)"/><text x="2.6247%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.53%)</title><rect x="2.3747%" y="245" width="0.5277%" height="15" fill="rgb(232,36,49)"/><text x="2.6247%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.53%)</title><rect x="2.3747%" y="229" width="0.5277%" height="15" fill="rgb(209,103,24)"/><text x="2.6247%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.53%)</title><rect x="2.3747%" y="213" width="0.5277%" height="15" fill="rgb(229,88,8)"/><text x="2.6247%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.53%)</title><rect x="2.3747%" y="197" width="0.5277%" height="15" fill="rgb(213,181,19)"/><text x="2.6247%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.53%)</title><rect x="2.3747%" y="181" width="0.5277%" height="15" fill="rgb(254,191,54)"/><text x="2.6247%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.53%)</title><rect x="2.3747%" y="165" width="0.5277%" height="15" fill="rgb(241,83,37)"/><text x="2.6247%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.53%)</title><rect x="2.3747%" y="149" width="0.5277%" height="15" fill="rgb(233,36,39)"/><text x="2.6247%" y="159.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.53%)</title><rect x="2.3747%" y="133" width="0.5277%" height="15" fill="rgb(226,3,54)"/><text x="2.6247%" y="143.50"></text></g><g><title>__GI___libc_malloc (7 samples, 1.85%)</title><rect x="2.9024%" y="325" width="1.8470%" height="15" fill="rgb(245,192,40)"/><text x="3.1524%" y="335.50">_..</text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.79%)</title><rect x="4.7493%" y="325" width="0.7916%" height="15" fill="rgb(238,167,29)"/><text x="4.9993%" y="335.50"></text></g><g><title>__rust_dealloc (1 samples, 0.26%)</title><rect x="5.5409%" y="325" width="0.2639%" height="15" fill="rgb(232,182,51)"/><text x="5.7909%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.53%)</title><rect x="5.8047%" y="325" width="0.5277%" height="15" fill="rgb(231,60,39)"/><text x="6.0547%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.53%)</title><rect x="5.8047%" y="309" width="0.5277%" height="15" fill="rgb(208,69,12)"/><text x="6.0547%" y="319.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.53%)</title><rect x="5.8047%" y="293" width="0.5277%" height="15" fill="rgb(235,93,37)"/><text x="6.0547%" y="303.50"></text></g><g><title>_int_realloc (2 samples, 0.53%)</title><rect x="5.8047%" y="277" width="0.5277%" height="15" fill="rgb(213,116,39)"/><text x="6.0547%" y="287.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="6.0686%" y="261" width="0.2639%" height="15" fill="rgb(222,207,29)"/><text x="6.3186%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.53%)</title><rect x="7.6517%" y="293" width="0.5277%" height="15" fill="rgb(206,96,30)"/><text x="7.9017%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="7.9156%" y="277" width="0.2639%" height="15" fill="rgb(218,138,4)"/><text x="8.1656%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.26%)</title><rect x="7.9156%" y="261" width="0.2639%" height="15" fill="rgb(250,191,14)"/><text x="8.1656%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.26%)</title><rect x="7.9156%" y="245" width="0.2639%" height="15" fill="rgb(239,60,40)"/><text x="8.1656%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.26%)</title><rect x="7.9156%" y="229" width="0.2639%" height="15" fill="rgb(206,27,48)"/><text x="8.1656%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.26%)</title><rect x="7.9156%" y="213" width="0.2639%" height="15" fill="rgb(225,35,8)"/><text x="8.1656%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.26%)</title><rect x="7.9156%" y="197" width="0.2639%" height="15" fill="rgb(250,213,24)"/><text x="8.1656%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="7.9156%" y="181" width="0.2639%" height="15" fill="rgb(247,123,22)"/><text x="8.1656%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 1.06%)</title><rect x="7.3879%" y="309" width="1.0554%" height="15" fill="rgb(231,138,38)"/><text x="7.6379%" y="319.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="8.1794%" y="293" width="0.2639%" height="15" fill="rgb(231,145,46)"/><text x="8.4294%" y="303.50"></text></g><g><title>__GI___libc_free (8 samples, 2.11%)</title><rect x="8.4433%" y="309" width="2.1108%" height="15" fill="rgb(251,118,11)"/><text x="8.6933%" y="319.50">_..</text></g><g><title>_int_free (5 samples, 1.32%)</title><rect x="9.2348%" y="293" width="1.3193%" height="15" fill="rgb(217,147,25)"/><text x="9.4848%" y="303.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.79%)</title><rect x="10.5541%" y="309" width="0.7916%" height="15" fill="rgb(247,81,37)"/><text x="10.8041%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 1.85%)</title><rect x="11.3456%" y="309" width="1.8470%" height="15" fill="rgb(209,12,38)"/><text x="11.5956%" y="319.50">_..</text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="13.1926%" y="309" width="0.2639%" height="15" fill="rgb(227,1,9)"/><text x="13.4426%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.26%)</title><rect x="13.4565%" y="245" width="0.2639%" height="15" fill="rgb(248,47,43)"/><text x="13.7065%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.53%)</title><rect x="13.4565%" y="309" width="0.5277%" height="15" fill="rgb(221,10,30)"/><text x="13.7065%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.53%)</title><rect x="13.4565%" y="293" width="0.5277%" height="15" fill="rgb(210,229,1)"/><text x="13.7065%" y="303.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.53%)</title><rect x="13.4565%" y="277" width="0.5277%" height="15" fill="rgb(222,148,37)"/><text x="13.7065%" y="287.50"></text></g><g><title>_int_realloc (2 samples, 0.53%)</title><rect x="13.4565%" y="261" width="0.5277%" height="15" fill="rgb(234,67,33)"/><text x="13.7065%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="13.7203%" y="245" width="0.2639%" height="15" fill="rgb(247,98,35)"/><text x="13.9703%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 1.85%)</title><rect x="15.0396%" y="293" width="1.8470%" height="15" fill="rgb(247,138,52)"/><text x="15.2896%" y="303.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.79%)</title><rect x="16.0950%" y="277" width="0.7916%" height="15" fill="rgb(213,79,30)"/><text x="16.3450%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="16.6227%" y="261" width="0.2639%" height="15" fill="rgb(246,177,23)"/><text x="16.8727%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.26%)</title><rect x="16.6227%" y="245" width="0.2639%" height="15" fill="rgb(230,62,27)"/><text x="16.8727%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.26%)</title><rect x="16.6227%" y="229" width="0.2639%" height="15" fill="rgb(216,154,8)"/><text x="16.8727%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.26%)</title><rect x="16.6227%" y="213" width="0.2639%" height="15" fill="rgb(244,35,45)"/><text x="16.8727%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="16.6227%" y="197" width="0.2639%" height="15" fill="rgb(251,115,12)"/><text x="16.8727%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="16.6227%" y="181" width="0.2639%" height="15" fill="rgb(240,54,50)"/><text x="16.8727%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="16.6227%" y="165" width="0.2639%" height="15" fill="rgb(233,84,52)"/><text x="16.8727%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.26%)</title><rect x="16.6227%" y="149" width="0.2639%" height="15" fill="rgb(207,117,47)"/><text x="16.8727%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="16.6227%" y="133" width="0.2639%" height="15" fill="rgb(249,43,39)"/><text x="16.8727%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="16.6227%" y="117" width="0.2639%" height="15" fill="rgb(209,38,44)"/><text x="16.8727%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="16.6227%" y="101" width="0.2639%" height="15" fill="rgb(236,212,23)"/><text x="16.8727%" y="111.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="16.6227%" y="85" width="0.2639%" height="15" fill="rgb(242,79,21)"/><text x="16.8727%" y="95.50"></text></g><g><title>__GI___libc_free (7 samples, 1.85%)</title><rect x="16.8865%" y="293" width="1.8470%" height="15" fill="rgb(211,96,35)"/><text x="17.1365%" y="303.50">_..</text></g><g><title>_int_free (4 samples, 1.06%)</title><rect x="17.6781%" y="277" width="1.0554%" height="15" fill="rgb(253,215,40)"/><text x="17.9281%" y="287.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.26%)</title><rect x="18.4697%" y="261" width="0.2639%" height="15" fill="rgb(211,81,21)"/><text x="18.7197%" y="271.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.79%)</title><rect x="18.7335%" y="293" width="0.7916%" height="15" fill="rgb(208,190,38)"/><text x="18.9835%" y="303.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 1.06%)</title><rect x="19.5251%" y="293" width="1.0554%" height="15" fill="rgb(235,213,38)"/><text x="19.7751%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.26%)</title><rect x="20.5805%" y="293" width="0.2639%" height="15" fill="rgb(237,122,38)"/><text x="20.8305%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.26%)</title><rect x="20.5805%" y="277" width="0.2639%" height="15" fill="rgb(244,218,35)"/><text x="20.8305%" y="287.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.26%)</title><rect x="20.8443%" y="293" width="0.2639%" height="15" fill="rgb(240,68,47)"/><text x="21.0943%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.26%)</title><rect x="20.8443%" y="277" width="0.2639%" height="15" fill="rgb(210,16,53)"/><text x="21.0943%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.79%)</title><rect x="21.1082%" y="293" width="0.7916%" height="15" fill="rgb(235,124,12)"/><text x="21.3582%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.79%)</title><rect x="21.1082%" y="277" width="0.7916%" height="15" fill="rgb(224,169,11)"/><text x="21.3582%" y="287.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.79%)</title><rect x="21.1082%" y="261" width="0.7916%" height="15" fill="rgb(250,166,2)"/><text x="21.3582%" y="271.50"></text></g><g><title>_int_realloc (1 samples, 0.26%)</title><rect x="21.6359%" y="245" width="0.2639%" height="15" fill="rgb(242,216,29)"/><text x="21.8859%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="21.6359%" y="229" width="0.2639%" height="15" fill="rgb(230,116,27)"/><text x="21.8859%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.26%)</title><rect x="21.6359%" y="213" width="0.2639%" height="15" fill="rgb(228,99,48)"/><text x="21.8859%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="25.0660%" y="277" width="0.2639%" height="15" fill="rgb(253,11,6)"/><text x="25.3160%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="25.0660%" y="261" width="0.2639%" height="15" fill="rgb(247,143,39)"/><text x="25.3160%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.26%)</title><rect x="25.0660%" y="245" width="0.2639%" height="15" fill="rgb(236,97,10)"/><text x="25.3160%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.26%)</title><rect x="25.0660%" y="229" width="0.2639%" height="15" fill="rgb(233,208,19)"/><text x="25.3160%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.26%)</title><rect x="25.0660%" y="213" width="0.2639%" height="15" fill="rgb(216,164,2)"/><text x="25.3160%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="25.0660%" y="197" width="0.2639%" height="15" fill="rgb(220,129,5)"/><text x="25.3160%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="25.0660%" y="181" width="0.2639%" height="15" fill="rgb(242,17,10)"/><text x="25.3160%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="25.0660%" y="165" width="0.2639%" height="15" fill="rgb(242,107,0)"/><text x="25.3160%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.26%)</title><rect x="25.0660%" y="149" width="0.2639%" height="15" fill="rgb(251,28,31)"/><text x="25.3160%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="25.0660%" y="133" width="0.2639%" height="15" fill="rgb(233,223,10)"/><text x="25.3160%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="25.0660%" y="117" width="0.2639%" height="15" fill="rgb(215,21,27)"/><text x="25.3160%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="25.0660%" y="101" width="0.2639%" height="15" fill="rgb(232,23,21)"/><text x="25.3160%" y="111.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="25.0660%" y="85" width="0.2639%" height="15" fill="rgb(244,5,23)"/><text x="25.3160%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="26.3852%" y="181" width="0.2639%" height="15" fill="rgb(226,81,46)"/><text x="26.6352%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="26.3852%" y="165" width="0.2639%" height="15" fill="rgb(247,70,30)"/><text x="26.6352%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="26.3852%" y="149" width="0.2639%" height="15" fill="rgb(212,68,19)"/><text x="26.6352%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.26%)</title><rect x="26.3852%" y="133" width="0.2639%" height="15" fill="rgb(240,187,13)"/><text x="26.6352%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="26.3852%" y="117" width="0.2639%" height="15" fill="rgb(223,113,26)"/><text x="26.6352%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="26.3852%" y="101" width="0.2639%" height="15" fill="rgb(206,192,2)"/><text x="26.6352%" y="111.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="26.3852%" y="85" width="0.2639%" height="15" fill="rgb(241,108,4)"/><text x="26.6352%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 1.58%)</title><rect x="25.3298%" y="277" width="1.5831%" height="15" fill="rgb(247,173,49)"/><text x="25.5798%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.53%)</title><rect x="26.3852%" y="261" width="0.5277%" height="15" fill="rgb(224,114,35)"/><text x="26.6352%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.53%)</title><rect x="26.3852%" y="245" width="0.5277%" height="15" fill="rgb(245,159,27)"/><text x="26.6352%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.53%)</title><rect x="26.3852%" y="229" width="0.5277%" height="15" fill="rgb(245,172,44)"/><text x="26.6352%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.53%)</title><rect x="26.3852%" y="213" width="0.5277%" height="15" fill="rgb(236,23,11)"/><text x="26.6352%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.53%)</title><rect x="26.3852%" y="197" width="0.5277%" height="15" fill="rgb(205,117,38)"/><text x="26.6352%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.26%)</title><rect x="26.6491%" y="181" width="0.2639%" height="15" fill="rgb(237,72,25)"/><text x="26.8991%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.26%)</title><rect x="26.6491%" y="165" width="0.2639%" height="15" fill="rgb(244,70,9)"/><text x="26.8991%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="26.6491%" y="149" width="0.2639%" height="15" fill="rgb(217,125,39)"/><text x="26.8991%" y="159.50"></text></g><g><title>__GI___libc_free (11 samples, 2.90%)</title><rect x="26.9129%" y="277" width="2.9024%" height="15" fill="rgb(235,36,10)"/><text x="27.1629%" y="287.50">__..</text></g><g><title>_int_free (8 samples, 2.11%)</title><rect x="27.7045%" y="261" width="2.1108%" height="15" fill="rgb(251,123,47)"/><text x="27.9545%" y="271.50">_..</text></g><g><title>__GI___libc_malloc (4 samples, 1.06%)</title><rect x="29.8153%" y="277" width="1.0554%" height="15" fill="rgb(221,13,13)"/><text x="30.0653%" y="287.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 2.11%)</title><rect x="30.8707%" y="277" width="2.1108%" height="15" fill="rgb(238,131,9)"/><text x="31.1207%" y="287.50">_..</text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="32.9815%" y="277" width="0.2639%" height="15" fill="rgb(211,50,8)"/><text x="33.2315%" y="287.50"></text></g><g><title>__rdl_alloc (2 samples, 0.53%)</title><rect x="33.2454%" y="277" width="0.5277%" height="15" fill="rgb(245,182,24)"/><text x="33.4954%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.26%)</title><rect x="33.5092%" y="261" width="0.2639%" height="15" fill="rgb(242,14,37)"/><text x="33.7592%" y="271.50"></text></g><g><title>__rust_dealloc (1 samples, 0.26%)</title><rect x="33.7731%" y="277" width="0.2639%" height="15" fill="rgb(246,228,12)"/><text x="34.0231%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="34.5646%" y="213" width="0.2639%" height="15" fill="rgb(213,55,15)"/><text x="34.8146%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 1.32%)</title><rect x="34.0369%" y="277" width="1.3193%" height="15" fill="rgb(209,9,3)"/><text x="34.2869%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 1.32%)</title><rect x="34.0369%" y="261" width="1.3193%" height="15" fill="rgb(230,59,30)"/><text x="34.2869%" y="271.50"></text></g><g><title>__GI___libc_realloc (4 samples, 1.06%)</title><rect x="34.3008%" y="245" width="1.0554%" height="15" fill="rgb(209,121,21)"/><text x="34.5508%" y="255.50"></text></g><g><title>_int_realloc (4 samples, 1.06%)</title><rect x="34.3008%" y="229" width="1.0554%" height="15" fill="rgb(220,109,13)"/><text x="34.5508%" y="239.50"></text></g><g><title>_int_malloc (2 samples, 0.53%)</title><rect x="34.8285%" y="213" width="0.5277%" height="15" fill="rgb(232,18,1)"/><text x="35.0785%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.26%)</title><rect x="35.0923%" y="197" width="0.2639%" height="15" fill="rgb(215,41,42)"/><text x="35.3423%" y="207.50"></text></g><g><title>__GI___libc_malloc (4 samples, 1.06%)</title><rect x="39.5778%" y="69" width="1.0554%" height="15" fill="rgb(224,123,36)"/><text x="39.8278%" y="79.50"></text></g><g><title>_int_malloc (2 samples, 0.53%)</title><rect x="40.1055%" y="53" width="0.5277%" height="15" fill="rgb(240,125,3)"/><text x="40.3555%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 1.32%)</title><rect x="39.5778%" y="165" width="1.3193%" height="15" fill="rgb(205,98,50)"/><text x="39.8278%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 1.32%)</title><rect x="39.5778%" y="149" width="1.3193%" height="15" fill="rgb(205,185,37)"/><text x="39.8278%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 1.32%)</title><rect x="39.5778%" y="133" width="1.3193%" height="15" fill="rgb(238,207,15)"/><text x="39.8278%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 1.32%)</title><rect x="39.5778%" y="117" width="1.3193%" height="15" fill="rgb(213,199,42)"/><text x="39.8278%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 1.32%)</title><rect x="39.5778%" y="101" width="1.3193%" height="15" fill="rgb(235,201,11)"/><text x="39.8278%" y="111.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 1.32%)</title><rect x="39.5778%" y="85" width="1.3193%" height="15" fill="rgb(207,46,11)"/><text x="39.8278%" y="95.50"></text></g><g><title>__rust_alloc (1 samples, 0.26%)</title><rect x="40.6332%" y="69" width="0.2639%" height="15" fill="rgb(241,35,35)"/><text x="40.8832%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 2.37%)</title><rect x="38.7863%" y="261" width="2.3747%" height="15" fill="rgb(243,32,47)"/><text x="39.0363%" y="271.50">&lt;a..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 1.58%)</title><rect x="39.5778%" y="245" width="1.5831%" height="15" fill="rgb(247,202,23)"/><text x="39.8278%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 1.58%)</title><rect x="39.5778%" y="229" width="1.5831%" height="15" fill="rgb(219,102,11)"/><text x="39.8278%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 1.58%)</title><rect x="39.5778%" y="213" width="1.5831%" height="15" fill="rgb(243,110,44)"/><text x="39.8278%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 1.58%)</title><rect x="39.5778%" y="197" width="1.5831%" height="15" fill="rgb(222,74,54)"/><text x="39.8278%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 1.58%)</title><rect x="39.5778%" y="181" width="1.5831%" height="15" fill="rgb(216,99,12)"/><text x="39.8278%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.26%)</title><rect x="40.8971%" y="165" width="0.2639%" height="15" fill="rgb(226,22,26)"/><text x="41.1471%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.26%)</title><rect x="40.8971%" y="149" width="0.2639%" height="15" fill="rgb(217,163,10)"/><text x="41.1471%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="40.8971%" y="133" width="0.2639%" height="15" fill="rgb(213,25,53)"/><text x="41.1471%" y="143.50"></text></g><g><title>__GI___libc_free (11 samples, 2.90%)</title><rect x="41.1609%" y="261" width="2.9024%" height="15" fill="rgb(252,105,26)"/><text x="41.4109%" y="271.50">__..</text></g><g><title>_int_free (8 samples, 2.11%)</title><rect x="41.9525%" y="245" width="2.1108%" height="15" fill="rgb(220,39,43)"/><text x="42.2025%" y="255.50">_..</text></g><g><title>__GI___libc_malloc (2 samples, 0.53%)</title><rect x="44.0633%" y="261" width="0.5277%" height="15" fill="rgb(229,68,48)"/><text x="44.3133%" y="271.50"></text></g><g><title>__memcmp_avx2_movbe (13 samples, 3.43%)</title><rect x="44.5910%" y="261" width="3.4301%" height="15" fill="rgb(252,8,32)"/><text x="44.8410%" y="271.50">__m..</text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="48.0211%" y="261" width="0.2639%" height="15" fill="rgb(223,20,43)"/><text x="48.2711%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="48.2850%" y="261" width="0.2639%" height="15" fill="rgb(229,81,49)"/><text x="48.5350%" y="271.50"></text></g><g><title>__rdl_alloc (3 samples, 0.79%)</title><rect x="48.5488%" y="261" width="0.7916%" height="15" fill="rgb(236,28,36)"/><text x="48.7988%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.53%)</title><rect x="48.8127%" y="245" width="0.5277%" height="15" fill="rgb(249,185,26)"/><text x="49.0627%" y="255.50"></text></g><g><title>__rust_alloc (2 samples, 0.53%)</title><rect x="49.3404%" y="261" width="0.5277%" height="15" fill="rgb(249,174,33)"/><text x="49.5904%" y="271.50"></text></g><g><title>__rust_dealloc (2 samples, 0.53%)</title><rect x="49.8681%" y="261" width="0.5277%" height="15" fill="rgb(233,201,37)"/><text x="50.1181%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.53%)</title><rect x="50.3958%" y="261" width="0.5277%" height="15" fill="rgb(221,78,26)"/><text x="50.6458%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.26%)</title><rect x="50.6596%" y="245" width="0.2639%" height="15" fill="rgb(250,127,30)"/><text x="50.9096%" y="255.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.26%)</title><rect x="50.6596%" y="229" width="0.2639%" height="15" fill="rgb(230,49,44)"/><text x="50.9096%" y="239.50"></text></g><g><title>_int_realloc (1 samples, 0.26%)</title><rect x="50.6596%" y="213" width="0.2639%" height="15" fill="rgb(229,67,23)"/><text x="50.9096%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="50.6596%" y="197" width="0.2639%" height="15" fill="rgb(249,83,47)"/><text x="50.9096%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 1.06%)</title><rect x="53.0343%" y="245" width="1.0554%" height="15" fill="rgb(215,43,3)"/><text x="53.2843%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="53.8259%" y="229" width="0.2639%" height="15" fill="rgb(238,154,13)"/><text x="54.0759%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.26%)</title><rect x="53.8259%" y="213" width="0.2639%" height="15" fill="rgb(219,56,2)"/><text x="54.0759%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.26%)</title><rect x="53.8259%" y="197" width="0.2639%" height="15" fill="rgb(233,0,4)"/><text x="54.0759%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.26%)</title><rect x="53.8259%" y="181" width="0.2639%" height="15" fill="rgb(235,30,7)"/><text x="54.0759%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.26%)</title><rect x="53.8259%" y="165" width="0.2639%" height="15" fill="rgb(250,79,13)"/><text x="54.0759%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="53.8259%" y="149" width="0.2639%" height="15" fill="rgb(211,146,34)"/><text x="54.0759%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="53.8259%" y="133" width="0.2639%" height="15" fill="rgb(228,22,38)"/><text x="54.0759%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="53.8259%" y="117" width="0.2639%" height="15" fill="rgb(235,168,5)"/><text x="54.0759%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.26%)</title><rect x="53.8259%" y="101" width="0.2639%" height="15" fill="rgb(221,155,16)"/><text x="54.0759%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="53.8259%" y="85" width="0.2639%" height="15" fill="rgb(215,215,53)"/><text x="54.0759%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="53.8259%" y="69" width="0.2639%" height="15" fill="rgb(223,4,10)"/><text x="54.0759%" y="79.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="53.8259%" y="53" width="0.2639%" height="15" fill="rgb(234,103,6)"/><text x="54.0759%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="53.8259%" y="37" width="0.2639%" height="15" fill="rgb(227,97,0)"/><text x="54.0759%" y="47.50"></text></g><g><title>__GI___libc_free (2 samples, 0.53%)</title><rect x="54.0897%" y="245" width="0.5277%" height="15" fill="rgb(234,150,53)"/><text x="54.3397%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.26%)</title><rect x="54.3536%" y="229" width="0.2639%" height="15" fill="rgb(228,201,54)"/><text x="54.6036%" y="239.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 2.11%)</title><rect x="54.6174%" y="245" width="2.1108%" height="15" fill="rgb(222,22,37)"/><text x="54.8674%" y="255.50">_..</text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.79%)</title><rect x="56.7282%" y="245" width="0.7916%" height="15" fill="rgb(237,53,32)"/><text x="56.9782%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="57.5198%" y="245" width="0.2639%" height="15" fill="rgb(233,25,53)"/><text x="57.7698%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.26%)</title><rect x="57.7836%" y="245" width="0.2639%" height="15" fill="rgb(210,40,34)"/><text x="58.0336%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.26%)</title><rect x="57.7836%" y="229" width="0.2639%" height="15" fill="rgb(241,220,44)"/><text x="58.0336%" y="239.50"></text></g><g><title>__rust_dealloc (1 samples, 0.26%)</title><rect x="58.0475%" y="245" width="0.2639%" height="15" fill="rgb(235,28,35)"/><text x="58.2975%" y="255.50"></text></g><g><title>__GI___libc_free (6 samples, 1.58%)</title><rect x="59.1029%" y="229" width="1.5831%" height="15" fill="rgb(210,56,17)"/><text x="59.3529%" y="239.50"></text></g><g><title>_int_free (5 samples, 1.32%)</title><rect x="59.3668%" y="213" width="1.3193%" height="15" fill="rgb(224,130,29)"/><text x="59.6168%" y="223.50"></text></g><g><title>malloc_consolidate (3 samples, 0.79%)</title><rect x="59.8945%" y="197" width="0.7916%" height="15" fill="rgb(235,212,8)"/><text x="60.1445%" y="207.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.26%)</title><rect x="60.6860%" y="229" width="0.2639%" height="15" fill="rgb(223,33,50)"/><text x="60.9360%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="60.9499%" y="229" width="0.2639%" height="15" fill="rgb(219,149,13)"/><text x="61.1999%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="61.2137%" y="229" width="0.2639%" height="15" fill="rgb(250,156,29)"/><text x="61.4637%" y="239.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.26%)</title><rect x="61.4776%" y="229" width="0.2639%" height="15" fill="rgb(216,193,19)"/><text x="61.7276%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.26%)</title><rect x="61.4776%" y="213" width="0.2639%" height="15" fill="rgb(216,135,14)"/><text x="61.7276%" y="223.50"></text></g><g><title>__rust_alloc (1 samples, 0.26%)</title><rect x="61.7414%" y="229" width="0.2639%" height="15" fill="rgb(241,47,5)"/><text x="61.9914%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.53%)</title><rect x="63.5884%" y="213" width="0.5277%" height="15" fill="rgb(233,42,35)"/><text x="63.8384%" y="223.50"></text></g><g><title>day12::generate_paths (28 samples, 7.39%)</title><rect x="58.3113%" y="245" width="7.3879%" height="15" fill="rgb(231,13,6)"/><text x="58.5613%" y="255.50">day12::gen..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 3.69%)</title><rect x="62.0053%" y="229" width="3.6939%" height="15" fill="rgb(207,181,40)"/><text x="62.2553%" y="239.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 1.58%)</title><rect x="64.1161%" y="213" width="1.5831%" height="15" fill="rgb(254,173,49)"/><text x="64.3661%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.79%)</title><rect x="64.9077%" y="197" width="0.7916%" height="15" fill="rgb(221,1,38)"/><text x="65.1577%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.53%)</title><rect x="65.1715%" y="181" width="0.5277%" height="15" fill="rgb(206,124,46)"/><text x="65.4215%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.79%)</title><rect x="68.6016%" y="229" width="0.7916%" height="15" fill="rgb(249,21,11)"/><text x="68.8516%" y="239.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.26%)</title><rect x="69.3931%" y="229" width="0.2639%" height="15" fill="rgb(222,201,40)"/><text x="69.6431%" y="239.50"></text></g><g><title>__GI___libc_free (1 samples, 0.26%)</title><rect x="71.2401%" y="197" width="0.2639%" height="15" fill="rgb(235,61,29)"/><text x="71.4901%" y="207.50"></text></g><g><title>_int_free (1 samples, 0.26%)</title><rect x="71.2401%" y="181" width="0.2639%" height="15" fill="rgb(219,207,3)"/><text x="71.4901%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="71.5040%" y="197" width="0.2639%" height="15" fill="rgb(222,56,46)"/><text x="71.7540%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (28 samples, 7.39%)</title><rect x="65.6992%" y="245" width="7.3879%" height="15" fill="rgb(239,76,54)"/><text x="65.9492%" y="255.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 3.43%)</title><rect x="69.6570%" y="229" width="3.4301%" height="15" fill="rgb(231,124,27)"/><text x="69.9070%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 3.17%)</title><rect x="69.9208%" y="213" width="3.1662%" height="15" fill="rgb(249,195,6)"/><text x="70.1708%" y="223.50">has..</text></g><g><title>hashbrown::map::make_hash (5 samples, 1.32%)</title><rect x="71.7678%" y="197" width="1.3193%" height="15" fill="rgb(237,174,47)"/><text x="72.0178%" y="207.50"></text></g><g><title>day12::generate_paths (86 samples, 22.69%)</title><rect x="50.9235%" y="261" width="22.6913%" height="15" fill="rgb(206,201,31)"/><text x="51.1735%" y="271.50">day12::generate_paths</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.53%)</title><rect x="73.0871%" y="245" width="0.5277%" height="15" fill="rgb(231,57,52)"/><text x="73.3371%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 1.32%)</title><rect x="76.5172%" y="245" width="1.3193%" height="15" fill="rgb(248,177,22)"/><text x="76.7672%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="245" width="0.2639%" height="15" fill="rgb(215,211,37)"/><text x="78.0864%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="229" width="0.2639%" height="15" fill="rgb(241,128,51)"/><text x="78.0864%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="213" width="0.2639%" height="15" fill="rgb(227,165,31)"/><text x="78.0864%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="197" width="0.2639%" height="15" fill="rgb(228,167,24)"/><text x="78.0864%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="181" width="0.2639%" height="15" fill="rgb(228,143,12)"/><text x="78.0864%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="165" width="0.2639%" height="15" fill="rgb(249,149,8)"/><text x="78.0864%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="149" width="0.2639%" height="15" fill="rgb(243,35,44)"/><text x="78.0864%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="133" width="0.2639%" height="15" fill="rgb(246,89,9)"/><text x="78.0864%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.26%)</title><rect x="77.8364%" y="117" width="0.2639%" height="15" fill="rgb(233,213,13)"/><text x="78.0864%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 6.86%)</title><rect x="73.6148%" y="261" width="6.8602%" height="15" fill="rgb(233,141,41)"/><text x="73.8648%" y="271.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 2.37%)</title><rect x="78.1003%" y="245" width="2.3747%" height="15" fill="rgb(239,167,4)"/><text x="78.3503%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 2.11%)</title><rect x="78.3641%" y="229" width="2.1108%" height="15" fill="rgb(209,217,16)"/><text x="78.6141%" y="239.50">h..</text></g><g><title>hashbrown::map::make_hash (3 samples, 0.79%)</title><rect x="79.6834%" y="213" width="0.7916%" height="15" fill="rgb(219,88,35)"/><text x="79.9334%" y="223.50"></text></g><g><title>day12::generate_paths (172 samples, 45.38%)</title><rect x="35.3562%" y="277" width="45.3826%" height="15" fill="rgb(220,193,23)"/><text x="35.6062%" y="287.50">day12::generate_paths</text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="80.4749%" y="261" width="0.2639%" height="15" fill="rgb(230,90,52)"/><text x="80.7249%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.53%)</title><rect x="83.9050%" y="261" width="0.5277%" height="15" fill="rgb(252,106,19)"/><text x="84.1550%" y="271.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="85.7520%" y="229" width="0.2639%" height="15" fill="rgb(206,74,20)"/><text x="86.0020%" y="239.50"></text></g><g><title>__memset_avx2_unaligned (1 samples, 0.26%)</title><rect x="86.0158%" y="229" width="0.2639%" height="15" fill="rgb(230,138,44)"/><text x="86.2658%" y="239.50"></text></g><g><title>day12::generate_paths (246 samples, 64.91%)</title><rect x="21.8997%" y="293" width="64.9077%" height="15" fill="rgb(235,182,43)"/><text x="22.1497%" y="303.50">day12::generate_paths</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 6.07%)</title><rect x="80.7388%" y="277" width="6.0686%" height="15" fill="rgb(242,16,51)"/><text x="80.9888%" y="287.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 2.37%)</title><rect x="84.4327%" y="261" width="2.3747%" height="15" fill="rgb(248,9,4)"/><text x="84.6827%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 1.85%)</title><rect x="84.9604%" y="245" width="1.8470%" height="15" fill="rgb(210,31,22)"/><text x="85.2104%" y="255.50">h..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.53%)</title><rect x="86.2797%" y="229" width="0.5277%" height="15" fill="rgb(239,54,39)"/><text x="86.5297%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.53%)</title><rect x="88.6544%" y="277" width="0.5277%" height="15" fill="rgb(230,99,41)"/><text x="88.9044%" y="287.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.53%)</title><rect x="89.1821%" y="277" width="0.5277%" height="15" fill="rgb(253,106,12)"/><text x="89.4321%" y="287.50"></text></g><g><title>__rust_dealloc (1 samples, 0.26%)</title><rect x="92.3483%" y="245" width="0.2639%" height="15" fill="rgb(213,46,41)"/><text x="92.5983%" y="255.50"></text></g><g><title>day12::generate_paths (302 samples, 79.68%)</title><rect x="13.9842%" y="309" width="79.6834%" height="15" fill="rgb(215,133,35)"/><text x="14.2342%" y="319.50">day12::generate_paths</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 6.86%)</title><rect x="86.8074%" y="293" width="6.8602%" height="15" fill="rgb(213,28,5)"/><text x="87.0574%" y="303.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 3.96%)</title><rect x="89.7098%" y="277" width="3.9578%" height="15" fill="rgb(215,77,49)"/><text x="89.9598%" y="287.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 2.37%)</title><rect x="91.2929%" y="261" width="2.3747%" height="15" fill="rgb(248,100,22)"/><text x="91.5429%" y="271.50">ha..</text></g><g><title>hashbrown::map::make_hash (4 samples, 1.06%)</title><rect x="92.6121%" y="245" width="1.0554%" height="15" fill="rgb(208,67,9)"/><text x="92.8621%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.53%)</title><rect x="93.1398%" y="229" width="0.5277%" height="15" fill="rgb(219,133,21)"/><text x="93.3898%" y="239.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="95.2507%" y="261" width="0.2639%" height="15" fill="rgb(246,46,29)"/><text x="95.5007%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 2.11%)</title><rect x="93.6675%" y="309" width="2.1108%" height="15" fill="rgb(246,185,52)"/><text x="93.9175%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.79%)</title><rect x="94.9868%" y="293" width="0.7916%" height="15" fill="rgb(252,136,11)"/><text x="95.2368%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.53%)</title><rect x="95.2507%" y="277" width="0.5277%" height="15" fill="rgb(219,138,53)"/><text x="95.5007%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="95.5145%" y="261" width="0.2639%" height="15" fill="rgb(211,51,23)"/><text x="95.7645%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="95.5145%" y="245" width="0.2639%" height="15" fill="rgb(247,221,28)"/><text x="95.7645%" y="255.50"></text></g><g><title>day12::generate_paths (340 samples, 89.71%)</title><rect x="6.3325%" y="325" width="89.7098%" height="15" fill="rgb(251,222,45)"/><text x="6.5825%" y="335.50">day12::generate_paths</text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="95.7784%" y="309" width="0.2639%" height="15" fill="rgb(217,162,53)"/><text x="96.0284%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 1.06%)</title><rect x="96.0422%" y="325" width="1.0554%" height="15" fill="rgb(229,93,14)"/><text x="96.2922%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.79%)</title><rect x="96.3061%" y="309" width="0.7916%" height="15" fill="rgb(209,67,49)"/><text x="96.5561%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.79%)</title><rect x="96.3061%" y="293" width="0.7916%" height="15" fill="rgb(213,87,29)"/><text x="96.5561%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.53%)</title><rect x="96.5699%" y="277" width="0.5277%" height="15" fill="rgb(205,151,52)"/><text x="96.8199%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="96.8338%" y="261" width="0.2639%" height="15" fill="rgb(253,215,39)"/><text x="97.0838%" y="271.50"></text></g><g><title>day12::generate_paths (364 samples, 96.04%)</title><rect x="1.3193%" y="341" width="96.0422%" height="15" fill="rgb(221,220,41)"/><text x="1.5693%" y="351.50">day12::generate_paths</text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.26%)</title><rect x="97.0976%" y="325" width="0.2639%" height="15" fill="rgb(218,133,21)"/><text x="97.3476%" y="335.50"></text></g><g><title>day12::generate_paths (370 samples, 97.63%)</title><rect x="0.2639%" y="373" width="97.6253%" height="15" fill="rgb(221,193,43)"/><text x="0.5139%" y="383.50">day12::generate_paths</text></g><g><title>day12::generate_paths (368 samples, 97.10%)</title><rect x="0.7916%" y="357" width="97.0976%" height="15" fill="rgb(240,128,52)"/><text x="1.0416%" y="367.50">day12::generate_paths</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.53%)</title><rect x="97.3615%" y="341" width="0.5277%" height="15" fill="rgb(253,114,12)"/><text x="97.6115%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="97.6253%" y="325" width="0.2639%" height="15" fill="rgb(215,223,47)"/><text x="97.8753%" y="335.50"></text></g><g><title>__libc_start_main (372 samples, 98.15%)</title><rect x="0.2639%" y="693" width="98.1530%" height="15" fill="rgb(248,225,23)"/><text x="0.5139%" y="703.50">__libc_start_main</text></g><g><title>main (372 samples, 98.15%)</title><rect x="0.2639%" y="677" width="98.1530%" height="15" fill="rgb(250,108,0)"/><text x="0.5139%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (372 samples, 98.15%)</title><rect x="0.2639%" y="661" width="98.1530%" height="15" fill="rgb(228,208,7)"/><text x="0.5139%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (372 samples, 98.15%)</title><rect x="0.2639%" y="645" width="98.1530%" height="15" fill="rgb(244,45,10)"/><text x="0.5139%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (372 samples, 98.15%)</title><rect x="0.2639%" y="629" width="98.1530%" height="15" fill="rgb(207,125,25)"/><text x="0.5139%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (372 samples, 98.15%)</title><rect x="0.2639%" y="613" width="98.1530%" height="15" fill="rgb(210,195,18)"/><text x="0.5139%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (372 samples, 98.15%)</title><rect x="0.2639%" y="597" width="98.1530%" height="15" fill="rgb(249,80,12)"/><text x="0.5139%" y="607.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (372 samples, 98.15%)</title><rect x="0.2639%" y="581" width="98.1530%" height="15" fill="rgb(221,65,9)"/><text x="0.5139%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (372 samples, 98.15%)</title><rect x="0.2639%" y="565" width="98.1530%" height="15" fill="rgb(235,49,36)"/><text x="0.5139%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (372 samples, 98.15%)</title><rect x="0.2639%" y="549" width="98.1530%" height="15" fill="rgb(225,32,20)"/><text x="0.5139%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (372 samples, 98.15%)</title><rect x="0.2639%" y="533" width="98.1530%" height="15" fill="rgb(215,141,46)"/><text x="0.5139%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (372 samples, 98.15%)</title><rect x="0.2639%" y="517" width="98.1530%" height="15" fill="rgb(250,160,47)"/><text x="0.5139%" y="527.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (372 samples, 98.15%)</title><rect x="0.2639%" y="501" width="98.1530%" height="15" fill="rgb(216,222,40)"/><text x="0.5139%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>day12::main (372 samples, 98.15%)</title><rect x="0.2639%" y="485" width="98.1530%" height="15" fill="rgb(234,217,39)"/><text x="0.5139%" y="495.50">day12::main</text></g><g><title>day12::generate_paths (372 samples, 98.15%)</title><rect x="0.2639%" y="469" width="98.1530%" height="15" fill="rgb(207,178,40)"/><text x="0.5139%" y="479.50">day12::generate_paths</text></g><g><title>day12::generate_paths (372 samples, 98.15%)</title><rect x="0.2639%" y="453" width="98.1530%" height="15" fill="rgb(221,136,13)"/><text x="0.5139%" y="463.50">day12::generate_paths</text></g><g><title>day12::generate_paths (372 samples, 98.15%)</title><rect x="0.2639%" y="437" width="98.1530%" height="15" fill="rgb(249,199,10)"/><text x="0.5139%" y="447.50">day12::generate_paths</text></g><g><title>day12::generate_paths (372 samples, 98.15%)</title><rect x="0.2639%" y="421" width="98.1530%" height="15" fill="rgb(249,222,13)"/><text x="0.5139%" y="431.50">day12::generate_paths</text></g><g><title>day12::generate_paths (372 samples, 98.15%)</title><rect x="0.2639%" y="405" width="98.1530%" height="15" fill="rgb(244,185,38)"/><text x="0.5139%" y="415.50">day12::generate_paths</text></g><g><title>day12::generate_paths (372 samples, 98.15%)</title><rect x="0.2639%" y="389" width="98.1530%" height="15" fill="rgb(236,202,9)"/><text x="0.5139%" y="399.50">day12::generate_paths</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.53%)</title><rect x="97.8892%" y="373" width="0.5277%" height="15" fill="rgb(250,229,37)"/><text x="98.1392%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.26%)</title><rect x="98.1530%" y="357" width="0.2639%" height="15" fill="rgb(206,174,23)"/><text x="98.4030%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.26%)</title><rect x="98.1530%" y="341" width="0.2639%" height="15" fill="rgb(211,33,43)"/><text x="98.4030%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="98.1530%" y="325" width="0.2639%" height="15" fill="rgb(245,58,50)"/><text x="98.4030%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="98.1530%" y="309" width="0.2639%" height="15" fill="rgb(244,68,36)"/><text x="98.4030%" y="319.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="677" width="1.0554%" height="15" fill="rgb(232,229,15)"/><text x="98.6669%" y="687.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="661" width="1.0554%" height="15" fill="rgb(254,30,23)"/><text x="98.6669%" y="671.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="645" width="1.0554%" height="15" fill="rgb(235,160,14)"/><text x="98.6669%" y="655.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="629" width="1.0554%" height="15" fill="rgb(212,155,44)"/><text x="98.6669%" y="639.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="613" width="1.0554%" height="15" fill="rgb(226,2,50)"/><text x="98.6669%" y="623.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="597" width="1.0554%" height="15" fill="rgb(234,177,6)"/><text x="98.6669%" y="607.50"></text></g><g><title>[unknown] (4 samples, 1.06%)</title><rect x="98.4169%" y="581" width="1.0554%" height="15" fill="rgb(217,24,9)"/><text x="98.6669%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.79%)</title><rect x="98.6807%" y="565" width="0.7916%" height="15" fill="rgb(220,13,46)"/><text x="98.9307%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.79%)</title><rect x="98.6807%" y="549" width="0.7916%" height="15" fill="rgb(239,221,27)"/><text x="98.9307%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.79%)</title><rect x="98.6807%" y="533" width="0.7916%" height="15" fill="rgb(222,198,25)"/><text x="98.9307%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.53%)</title><rect x="98.9446%" y="517" width="0.5277%" height="15" fill="rgb(211,99,13)"/><text x="99.1946%" y="527.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.26%)</title><rect x="99.4723%" y="661" width="0.2639%" height="15" fill="rgb(232,111,31)"/><text x="99.7223%" y="671.50"></text></g><g><title>all (379 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(245,82,37)"/><text x="0.2500%" y="751.50"></text></g><g><title>day12 (379 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(227,149,46)"/><text x="0.2500%" y="735.50">day12</text></g><g><title>_start (379 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(218,36,50)"/><text x="0.2500%" y="719.50">_start</text></g><g><title>_dl_start (6 samples, 1.58%)</title><rect x="98.4169%" y="693" width="1.5831%" height="15" fill="rgb(226,80,48)"/><text x="98.6669%" y="703.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.53%)</title><rect x="99.4723%" y="677" width="0.5277%" height="15" fill="rgb(238,224,15)"/><text x="99.7223%" y="687.50"></text></g><g><title>dl_main (1 samples, 0.26%)</title><rect x="99.7361%" y="661" width="0.2639%" height="15" fill="rgb(241,136,10)"/><text x="99.9861%" y="671.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.26%)</title><rect x="99.7361%" y="645" width="0.2639%" height="15" fill="rgb(208,32,45)"/><text x="99.9861%" y="655.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.26%)</title><rect x="99.7361%" y="629" width="0.2639%" height="15" fill="rgb(207,135,9)"/><text x="99.9861%" y="639.50"></text></g><g><title>do_lookup_x (1 samples, 0.26%)</title><rect x="99.7361%" y="613" width="0.2639%" height="15" fill="rgb(206,86,44)"/><text x="99.9861%" y="623.50"></text></g></svg></svg>